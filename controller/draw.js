const express = require("express");

module.exports = (db) => {
  const router = express.Router();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤ element ‡∏à‡∏≤‡∏Å array (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
  const pickRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  const prizeAmounts = {
    1: 10000, // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
    2: 5000,  // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2
    3: 3000,  // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3
    4: 500,   // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
    5: 200,   // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
  };

  // ===== PREVIEW: ‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB) =====
  router.post("/preview", (req, res) => {
    const { mode } = req.body; // mode ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ "sold_only" ‡∏´‡∏£‡∏∑‡∏≠ "all_numbers"

    // query ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let query = "SELECT * FROM lottery_numbers";
    if (mode === "sold_only") query += " WHERE status = 'sold'"; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß

    db.all(query, [], (err, numbers) => {
      if (err) return res.status(500).json({ error: err.message });
      if (numbers.length === 0) return res.status(400).json({ error: "No numbers to draw" });

      // ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ array ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      let availableNumbers = [...numbers];

      function pickUnique() {
        const idx = Math.floor(Math.random() * availableNumbers.length);
        const chosen = availableNumbers[idx];
        availableNumbers.splice(idx, 1); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å pool
        return chosen.number;
      }

      // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
      const firstPrize = pickUnique();

      // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô)
      const secondPrize = pickUnique();
      const thirdPrize = pickUnique();
      const fifthPrize = pickUnique();

      const results = {
        1: firstPrize,          // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 ‚Üí ‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        2: secondPrize,         // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 ‚Üí ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
        3: thirdPrize,          // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 ‚Üí ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        4: firstPrize.slice(-3),// ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß ‚Üí ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
        5: fifthPrize.slice(-2) // ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      };

      res.json({ preview: results, prizeAmounts });
    });
  });

  // ===== CONFIRM: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB) =====
  router.post("/confirm", (req, res) => {
    const { mode, results } = req.body;
    if (!results) return res.status(400).json({ error: "results required" });

    // query ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
    let query = "SELECT * FROM lottery_numbers";
    if (mode === "sold_only") query += " WHERE status = 'sold'";

    db.all(query, [], (err, numbers) => {
      if (err) return res.status(500).json({ error: err.message });
      if (numbers.length === 0) return res.status(400).json({ error: "No numbers to draw" });

      // üîπ ‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      db.serialize(() => {
        db.run("DELETE FROM prizes");
        db.run("DELETE FROM redemptions");

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á draws
        db.run("INSERT INTO draws (mode) VALUES (?)", [mode], function (err) {
          if (err) return res.status(500).json({ error: err.message });
          const draw_id = this.lastID; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ id ‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

          let prizeResults = [];

          // ‡∏ß‡∏ô loop ‡∏ó‡∏∏‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å results
          Object.entries(results).forEach(([rank, prize_number]) => {
            const prize_amount = prizeAmounts[rank];

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á prizes
            db.run(
              "INSERT INTO prizes (draw_id, prize_rank, prize_number, prize_amount) VALUES (?, ?, ?, ?)",
              [draw_id, rank, prize_number, prize_amount]
            );

            // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
            let winners = [];
            if (rank <= 3) {
              winners = numbers.filter((n) => n.number === prize_number);
            } else {
              winners = numbers.filter((n) => n.number.endsWith(prize_number));
            }

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á redemptions
            winners.forEach((winner) => {
              db.run(
                "INSERT INTO redemptions (lottery_id, draw_id, prize_rank, prize_amount) VALUES (?, ?, ?, ?)",
                [winner.id, draw_id, rank, prize_amount]
              );
            });

            prizeResults.push({
              prize_rank: rank,
              prize_number,
              prize_amount,
              winners: winners.length,
            });
          });

          // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
          res.json({ message: "Draw confirmed", draw_id, prizes: prizeResults });
        });
      });
    });
  });

  // ===== ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (history) =====
  router.get("/all", (req, res) => {
    db.all("SELECT * FROM draws ORDER BY id DESC", [], (err, rows) => {
      if (err) return res.status(500).json({ error: err.message });
      res.json(rows);
    });
  });

  // ===== ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î =====
  router.get("/latest", (req, res) => {
    db.get("SELECT * FROM draws ORDER BY id DESC LIMIT 1", [], (err, draw) => {
      if (err) return res.status(500).json({ error: err.message });
      if (!draw) return res.status(404).json({ error: "No draws found" });

      // ‡πÄ‡∏≠‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      db.all("SELECT * FROM prizes WHERE draw_id = ? ORDER BY prize_rank ASC", [draw.id], (err, prizes) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(prizes);
      });
    });
  });

  // ===== ‡∏î‡∏π‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å =====
  router.get("/:draw_id/prizes", (req, res) => {
    const { draw_id } = req.params;
    db.all("SELECT * FROM prizes WHERE draw_id = ?", [draw_id], (err, rows) => {
      if (err) return res.status(500).json({ error: err.message });
      res.json(rows);
    });
  });

  // ===== ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å =====
  router.get("/:draw_id/redemptions", (req, res) => {
    const { draw_id } = req.params;
    db.all("SELECT * FROM redemptions WHERE draw_id = ?", [draw_id], (err, rows) => {
      if (err) return res.status(500).json({ error: err.message });
      res.json(rows);
    });
  });

  return router;
};
